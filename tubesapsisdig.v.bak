module tubesapsisdig (
    input wire clk,      // Clock input (50 MHz assumed)
    input wire reset,    // Reset signal (active high)
    output reg [2:0] light_main,  // Main road traffic light (R-Y-G)
    output reg [2:0] light_side   // Side road traffic light (R-Y-G)
	 input vcc,
	 input gnd
);

    // State encoding
    typedef enum logic [1:0] {
        MAIN_GREEN   = 2'b00,  // Main road green, side road red
        MAIN_YELLOW  = 2'b01,  // Main road yellow, side road red
        SIDE_GREEN   = 2'b10,  // Side road green, main road red
        SIDE_YELLOW  = 2'b11   // Side road yellow, main road red
    } state_t;

    state_t state, next_state;

    // Timer configuration (for 60-second period)
    localparam integer CLOCK_FREQ = 50000000; // Assuming 50 MHz clock
    localparam integer ONE_SECOND = CLOCK_FREQ;
    localparam integer TIMER_COUNT = 60;

    reg [31:0] timer;  // Timer register

    // State machine with timer-based transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= MAIN_GREEN;  // Initial state
            timer <= 0;
        end else begin
            if (timer < (TIMER_COUNT * ONE_SECOND)) begin
                timer <= timer + 1;
            end else begin
                timer <= 0;  // Reset timer
                state <= next_state;  // Transition to next state
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            MAIN_GREEN:   next_state = MAIN_YELLOW;
            MAIN_YELLOW:  next_state = SIDE_GREEN;
            SIDE_GREEN:   next_state = SIDE_YELLOW;
            SIDE_YELLOW:  next_state = MAIN_GREEN;
            default:      next_state = MAIN_GREEN;
        endcase
    end

    // Output logic
    always @(*) begin
        case (state)
            MAIN_GREEN: begin
                light_main = 3'b001;  // Green
                light_side = 3'b100;  // Red
            end
            MAIN_YELLOW: begin
                light_main = 3'b010;  // Yellow
                light_side = 3'b100;  // Red
            end
            SIDE_GREEN: begin
                light_main = 3'b100;  // Red
                light_side = 3'b001;  // Green
            end
            SIDE_YELLOW: begin
                light_main = 3'b100;  // Red
                light_side = 3'b010;  // Yellow
            end
            default: begin
                light_main = 3'b100;  // Default to red
                light_side = 3'b100;  // Default to red
            end
        endcase
    end
endmodule
